// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TalanCup.Infrastructure.Database;

#nullable disable

namespace TalanCup.Infrastructure.Database.Migrations
{
    [DbContext(typeof(TalanCupContext))]
    [Migration("20250704124606_AddTournamentEntity")]
    partial class AddTournamentEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PlayerTournament", b =>
                {
                    b.Property<Guid>("PlayersPlayerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TournamentsTournamentId")
                        .HasColumnType("uuid");

                    b.HasKey("PlayersPlayerId", "TournamentsTournamentId");

                    b.HasIndex("TournamentsTournamentId");

                    b.ToTable("TournamentPlayers", (string)null);
                });

            modelBuilder.Entity("TalanCup.Domain.Match", b =>
                {
                    b.Property<Guid>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AwayPlayerId")
                        .HasColumnType("uuid");

                    b.Property<long>("EndDate")
                        .HasColumnType("bigint");

                    b.Property<Guid>("HomePlayerId")
                        .HasColumnType("uuid");

                    b.Property<long>("StartDate")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uuid");

                    b.HasKey("MatchId");

                    b.HasIndex("AwayPlayerId");

                    b.HasIndex("HomePlayerId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Matchs");
                });

            modelBuilder.Entity("TalanCup.Domain.Player", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PlayerId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("TalanCup.Domain.Tournament", b =>
                {
                    b.Property<Guid>("TournamentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("MatchDuration")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("StartDate")
                        .HasColumnType("bigint");

                    b.HasKey("TournamentId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("PlayerTournament", b =>
                {
                    b.HasOne("TalanCup.Domain.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TalanCup.Domain.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsTournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TalanCup.Domain.Match", b =>
                {
                    b.HasOne("TalanCup.Domain.Player", "AwayPlayer")
                        .WithMany()
                        .HasForeignKey("AwayPlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Match_Player_AwayPlayerId");

                    b.HasOne("TalanCup.Domain.Player", "HomePlayer")
                        .WithMany()
                        .HasForeignKey("HomePlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Match_Player_HomePlayerId");

                    b.HasOne("TalanCup.Domain.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Match_Tournament_TournamentId");

                    b.Navigation("AwayPlayer");

                    b.Navigation("HomePlayer");

                    b.Navigation("Tournament");
                });
#pragma warning restore 612, 618
        }
    }
}
